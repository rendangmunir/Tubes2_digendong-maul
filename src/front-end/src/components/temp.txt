import React, { useState } from 'react';
import { Button } from 'react-bootstrap';
import Autosuggest from 'react-autosuggest';

class SearchSuggestions {
  constructor() {
    this.inputs = document.querySelectorAll('.form-control');
    this.suggestionLists = document.querySelectorAll('.suggestions');
    this.baseUrl = 'https://en.wikipedia.org/w/api.php';
    this.suggestions = [];

    this.attachEvents();
  }

  attachEvents() {
    this.inputs.forEach((input, index) => {
      input.addEventListener('input', (event) => {
        this.handleInput(event, index);
      });
    });

    document.addEventListener('click', (event) => {
      if (!event.target.closest('.suggestions')) {
        this.hideAllSuggestions();
      }
    });
  }

  handleInput(event, index) {
    const inputValue = event.target.value.toLowerCase();
    fetch(`http://localhost:8080/search?q=${encodeURIComponent(inputValue)}`)
      .then(response => response.json())
      .then(data => {
        this.updateSuggestions(data, index);
      })
      .catch(error => {
        console.error('Error fetching suggestions:', error);
      });
  }

  updateSuggestions(filteredSuggestions, index) {
    const suggestionList = this.suggestionLists[index];
    suggestionList.innerHTML = '';

    filteredSuggestions.forEach(suggestion => {
      const li = document.createElement('li');
      li.textContent = suggestion;
      li.addEventListener('click', () => {
        this.inputs[index].value = suggestion;
        this.hideAllSuggestions();
      });
      suggestionList.appendChild(li);
    });

    suggestionList.style.display = filteredSuggestions.length ? 'block' : 'none';
  }

  hideAllSuggestions() {
    this.suggestionLists.forEach(suggestionList => {
      suggestionList.style.display = 'none';
    });
  }
}

function SearchBox() {
  const [isSearchMode, setSearchMode] = useState(true);
  const handleToggle = () => {
    setSearchMode(!isSearchMode);
    // send data to API
  };

  new SearchSuggestions();
  return (
    <div className="container mt-5 mb-5">
      <h1 className="text-center">Wiki Search</h1>
      <div className="row justify-content-center">
        <div className="col-md-6">
          <form className="row justify-content-center">
            <div className="col justify-content-center text-center mb-3">
              <label htmlFor="exampleInputEmail1" className="form-label ">Source Link</label>
              <input type="text" className="form-control" id="exampleInputEmail1" placeholder="Search..." autoComplete="off" />
              <ul className="suggestions" id="suggestions"></ul>
            </div>
            <div className="col justify-content-center text-center mb-3">
              <label htmlFor="exampleInputEmail2" className="form-label">Destination Link</label>
              <input type="text" className="form-control" id="exampleInputEmail2" placeholder="Search..." autoComplete="off" />
              <ul className="suggestions" id="suggestions"></ul>
            </div>
            <Button className="mb-3" variant="secondary" onClick={handleToggle}>
              {isSearchMode ? 'BFS' : 'IDS'}
            </Button>
            <div className="form-check form-switch justify-content-center align-items-center mb-2">
              <input className="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault"/>
              <label className="form-check-label" htmlFor="flexSwitchCheckDefault">IDS input</label>
            </div>
            <Button variant="primary">
              Search
            </Button>
          </form>
        </div>
      </div>
    </div>
  );
}

export default SearchBox;
